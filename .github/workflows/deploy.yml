name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend to Render'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend to Netlify'
        required: true
        default: true
        type: boolean
      run_migrations:
        description: 'Run database migrations'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_backend: ${{ steps.check.outputs.deploy_backend }}
      deploy_frontend: ${{ steps.check.outputs.deploy_frontend }}
      run_migrations: ${{ steps.check.outputs.run_migrations }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: check
        run: |
          # Default values for manual triggers
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deploy_backend=${{ github.event.inputs.deploy_backend }}" >> $GITHUB_OUTPUT
            echo "deploy_frontend=${{ github.event.inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
            echo "run_migrations=${{ github.event.inputs.run_migrations }}" >> $GITHUB_OUTPUT
          else
            # Check for backend changes
            if git diff --name-only HEAD~1 HEAD | grep -q "^backend/"; then
              echo "deploy_backend=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_backend=false" >> $GITHUB_OUTPUT
            fi
            
            # Check for frontend changes
            if git diff --name-only HEAD~1 HEAD | grep -q "^frontend/"; then
              echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            fi
            
            # Check for migration changes
            if git diff --name-only HEAD~1 HEAD | grep -q "migrations/"; then
              echo "run_migrations=true" >> $GITHUB_OUTPUT
            else
              echo "run_migrations=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Database Migrations
  database-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.run_migrations == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run migrations
        working-directory: ./backend
        run: npm run db:migrate
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Verify migration status
        working-directory: ./backend
        run: |
          echo "Migrations completed successfully"
          # Add any migration verification commands here

  # Backend Deployment to Render
  # Note: Render usually auto-deploys from GitHub pushes, so this is optional
  # Only needed if you want to manually trigger deployments via API
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, database-migrations]
    if: |
      always() && 
      needs.pre-deploy-checks.outputs.deploy_backend == 'true' &&
      (needs.database-migrations.result == 'success' || needs.database-migrations.result == 'skipped')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        if: env.RENDER_API_KEY != '' && env.RENDER_SERVICE_ID != ''
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Triggering Render deployment..."
          # Trigger Render deployment
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -d '{"clearCache": "do_not_clear"}'

      - name: Skip health check
        run: |
          echo "Skipping health check - Render handles deployment verification"
          echo "Backend auto-deploys via Render's GitHub integration"
          echo "Check deployment status at: https://dashboard.render.com"

  # Frontend Deployment to Netlify
  deploy-frontend:
    name: Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, deploy-backend]
    if: |
      always() && 
      needs.pre-deploy-checks.outputs.deploy_frontend == 'true' &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build:prod
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './frontend/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  # Post-deployment verification
  post-deploy-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    environment: production
    steps:
      - name: Verify frontend
        if: needs.deploy-frontend.result == 'success'
        run: |
          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
            echo "Frontend is accessible!"
          else
            echo "Frontend verification failed"
            exit 1
          fi

      - name: Verify backend API
        if: needs.deploy-backend.result == 'success'
        run: |
          BACKEND_URL="${{ secrets.VITE_BACKEND_URL }}"
          if [ -z "$BACKEND_URL" ]; then
            BACKEND_URL="https://pedrobackend.onrender.com"
          fi
          echo "Checking backend at: $BACKEND_URL"
          # Just check if backend is responding, don't check health endpoint
          if curl -f "$BACKEND_URL" > /dev/null 2>&1; then
            echo "Backend is responding!"
          else
            echo "Backend not accessible"
            exit 1
          fi

      - name: Test critical endpoints
        if: needs.deploy-backend.result == 'success'
        run: |
          BACKEND_URL="${{ secrets.VITE_BACKEND_URL }}"
          if [ -z "$BACKEND_URL" ]; then
            BACKEND_URL="https://pedrobackend.onrender.com"
          fi
          
          # Test chat endpoint (the main functionality)
          if curl -f -X POST "$BACKEND_URL/chat" \
            -H "Content-Type: application/json" \
            -d '{"messages":[{"role":"user","content":"test"}],"systemPrompt":"test"}' > /dev/null 2>&1; then
            echo "Chat endpoint is working!"
          else
            echo "Warning: Chat endpoint not accessible"
          fi


  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, post-deploy-verification]
    if: failure()
    environment: production
    steps:
      - name: Trigger rollback
        run: |
          echo "Deployment failed. Initiating rollback..."
          # Add rollback logic here
          # For Render: Use their API to rollback to previous deployment
          # For Netlify: Use their API to restore previous deployment
          
