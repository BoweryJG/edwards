name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan every Monday at 9 AM UTC
    - cron: '0 9 * * 1'

env:
  NODE_VERSION: '18.x'

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit for all workspaces
        run: |
          # Audit the entire workspace
          npm audit --json > workspace-audit.json || true
          
          # Check for high/critical vulnerabilities
          if [ -s workspace-audit.json ]; then
            HIGH_VULNS=$(cat workspace-audit.json | jq '[.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")] | length')
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "::warning::$HIGH_VULNS high/critical vulnerabilities found in workspace"
              cat workspace-audit.json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | {name: .key, severity: .value.severity, title: .value.title}'
            else
              echo "No high/critical vulnerabilities found"
            fi
          fi
          
          # Also audit individual workspaces if needed
          echo "Running workspace-specific audits..."
          npm audit --workspace=frontend --json > frontend-audit.json || true
          npm audit --workspace=backend --json > backend-audit.json || true

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports
          path: |
            workspace-audit.json
            frontend-audit.json
            backend-audit.json
          retention-days: 7

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

  # OWASP Dependency Check
  owasp-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Ensure package-lock file exists
        run: |
          if [ ! -f package-lock.json ]; then
            echo "Generating package-lock.json..."
            npm install --legacy-peer-deps --package-lock-only
          else
            echo "package-lock.json already exists"
          fi

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        with:
          project: 'pedro-dental'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
            --scan package-lock.json
            --scan frontend/package.json
            --scan backend/package.json
            --failOnCVSS 7

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: reports/dependency-check-report.html
          retention-days: 7

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check security headers
        run: |
          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          BACKEND_URL="${{ secrets.VITE_BACKEND_URL }}"
          
          # Skip if URLs are not configured
          if [ -z "$FRONTEND_URL" ] || [ -z "$BACKEND_URL" ]; then
            echo "::warning::Security headers check skipped - URLs not configured in secrets"
            echo "Please set FRONTEND_URL and VITE_BACKEND_URL secrets for production security header validation"
            exit 0
          fi
          
          echo "Checking frontend security headers..."
          curl -I -s "$FRONTEND_URL" | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security|Content-Security-Policy)" || echo "::warning::Some security headers may be missing on frontend"
          
          echo "Checking backend security headers..."
          curl -I -s "$BACKEND_URL/health" | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security|Content-Security-Policy)" || echo "::warning::Some security headers may be missing on backend"

  # Container scanning (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false # Enable when Docker is implemented
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # API Security Testing
  api-security:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check API URL
        id: check-url
        run: |
          if [ -z "${{ secrets.VITE_BACKEND_URL }}" ]; then
            echo "::warning::API security scan skipped - VITE_BACKEND_URL not configured in secrets"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: OWASP ZAP API Scan
        if: steps.check-url.outputs.skip != 'true'
        uses: zaproxy/action-api-scan@v0.7.0
        with:
          target: ${{ secrets.VITE_BACKEND_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: false

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, owasp-check, security-headers, api-security]
    if: always()
    steps:
      - name: Create security summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'CodeQL Analysis': '${{ needs.codeql.result }}',
              'Dependency Scan': '${{ needs.dependency-scan.result }}',
              'Secret Scan': '${{ needs.secret-scan.result }}',
              'OWASP Check': '${{ needs.owasp-check.result }}',
              'Security Headers': '${{ needs.security-headers.result }}',
              'API Security': '${{ needs.api-security.result }}'
            };
            
            let hasCriticalFailures = false;
            let hasWarnings = false;
            let summary = '## Security Scan Summary\n\n';
            
            for (const [check, result] of Object.entries(results)) {
              let emoji = '✅';
              let status = result;
              
              // Handle different result types
              if (result === 'failure') {
                emoji = '❌';
                hasCriticalFailures = true;
              } else if (result === 'cancelled' || result === 'skipped') {
                emoji = '⚠️';
                hasWarnings = true;
                status = 'skipped/warning';
              }
              
              summary += `- ${emoji} ${check}: ${status}\n`;
            }
            
            summary += '\n### Notes:\n';
            summary += '- ⚠️ indicates checks that were skipped due to missing configuration\n';
            summary += '- Some checks require production URLs to be set in GitHub secrets\n';
            summary += '- Secret scanning uses continue-on-error to prevent blocking on false positives\n';
            
            // Only fail the workflow if there are critical failures in core checks
            const criticalChecks = ['CodeQL Analysis', 'Dependency Scan'];
            const hasCriticalCheckFailures = criticalChecks.some(check => 
              results[check] === 'failure'
            );
            
            if (hasCriticalCheckFailures) {
              core.setFailed('Critical security checks failed');
            } else if (hasWarnings) {
              core.warning('Some security checks were skipped or had warnings');
            }
            
            // Post comment on PR if applicable
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }